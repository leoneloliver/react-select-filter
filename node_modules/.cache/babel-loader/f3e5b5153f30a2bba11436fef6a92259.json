{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Pristine = factory();\n})(this, function () {\n  'use strict';\n\n  var lang = {\n    required: \"This field is required\",\n    email: \"This field requires a valid e-mail address\",\n    number: \"This field requires a number\",\n    url: \"This field requires a valid website URL\",\n    tel: \"This field requires a valid telephone number\",\n    maxlength: \"This fields length must be < ${1}\",\n    minlength: \"This fields length must be > ${1}\",\n    min: \"Minimum value for this field is ${1}\",\n    max: \"Maximum value for this field is ${1}\",\n    pattern: \"Input must match the pattern ${1}\"\n  };\n\n  function findAncestor(el, cls) {\n    while ((el = el.parentElement) && !el.classList.contains(cls)) {}\n\n    return el;\n  }\n\n  function tmpl(o) {\n    var _arguments = arguments;\n    return this.replace(/\\${([^{}]*)}/g, function (a, b) {\n      return _arguments[b];\n    });\n  }\n\n  function groupedElemCount(input) {\n    return input.pristine.self.form.querySelectorAll('input[name=\"' + input.getAttribute('name') + '\"]:checked').length;\n  }\n\n  function mergeConfig(obj1, obj2) {\n    for (var attr in obj2) {\n      if (!(attr in obj1)) {\n        obj1[attr] = obj2[attr];\n      }\n    }\n\n    return obj1;\n  }\n\n  var defaultConfig = {\n    classTo: 'form-group',\n    errorClass: 'has-danger',\n    successClass: 'has-success',\n    errorTextParent: 'form-group',\n    errorTextTag: 'div',\n    errorTextClass: 'text-help'\n  };\n  var PRISTINE_ERROR = 'pristine-error';\n  var SELECTOR = \"input:not([type^=hidden]):not([type^=submit]), select, textarea\";\n  var ALLOWED_ATTRIBUTES = [\"required\", \"min\", \"max\", 'minlength', 'maxlength', 'pattern'];\n  var validators = {};\n\n  var _ = function _(name, validator) {\n    validator.name = name;\n    if (!validator.msg) validator.msg = lang[name];\n    if (validator.priority === undefined) validator.priority = 1;\n    validators[name] = validator;\n  };\n\n  _('text', {\n    fn: function fn(val) {\n      return true;\n    },\n    priority: 0\n  });\n\n  _('required', {\n    fn: function fn(val) {\n      return this.type === 'radio' || this.type === 'checkbox' ? groupedElemCount(this) : val !== undefined && val !== '';\n    },\n    priority: 99,\n    halt: true\n  });\n\n  _('email', {\n    fn: function fn(val) {\n      return !val || /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(val);\n    }\n  });\n\n  _('number', {\n    fn: function fn(val) {\n      return !val || !isNaN(parseFloat(val));\n    },\n    priority: 2\n  });\n\n  _('integer', {\n    fn: function fn(val) {\n      return val && /^\\d+$/.test(val);\n    }\n  });\n\n  _('minlength', {\n    fn: function fn(val, length) {\n      return !val || val.length >= parseInt(length);\n    }\n  });\n\n  _('maxlength', {\n    fn: function fn(val, length) {\n      return !val || val.length <= parseInt(length);\n    }\n  });\n\n  _('min', {\n    fn: function fn(val, limit) {\n      return !val || (this.type === 'checkbox' ? groupedElemCount(this) >= parseInt(limit) : parseFloat(val) >= parseFloat(limit));\n    }\n  });\n\n  _('max', {\n    fn: function fn(val, limit) {\n      return !val || (this.type === 'checkbox' ? groupedElemCount(this) <= parseInt(limit) : parseFloat(val) <= parseFloat(limit));\n    }\n  });\n\n  _('pattern', {\n    fn: function fn(val, pattern) {\n      var m = pattern.match(new RegExp('^/(.*?)/([gimy]*)$'));\n      return !val || new RegExp(m[1], m[2]).test(val);\n    }\n  });\n\n  function Pristine(form, config, live) {\n    var self = this;\n    init(form, config, live);\n\n    function init(form, config, live) {\n      form.setAttribute(\"novalidate\", \"true\");\n      self.form = form;\n      self.config = mergeConfig(config || {}, defaultConfig);\n      self.live = !(live === false);\n      self.fields = Array.from(form.querySelectorAll(SELECTOR)).map(function (input) {\n        var fns = [];\n        var params = {};\n        var messages = {};\n        [].forEach.call(input.attributes, function (attr) {\n          if (/^data-pristine-/.test(attr.name)) {\n            var name = attr.name.substr(14);\n\n            if (name.endsWith('-message')) {\n              messages[name.slice(0, name.length - 8)] = attr.value;\n              return;\n            }\n\n            if (name === 'type') name = attr.value;\n\n            _addValidatorToField(fns, params, name, attr.value);\n          } else if (~ALLOWED_ATTRIBUTES.indexOf(attr.name)) {\n            _addValidatorToField(fns, params, attr.name, attr.value);\n          } else if (attr.name === 'type') {\n            _addValidatorToField(fns, params, attr.value);\n          }\n        });\n        fns.sort(function (a, b) {\n          return b.priority - a.priority;\n        });\n        self.live && input.addEventListener(!~['radio', 'checkbox'].indexOf(input.getAttribute('type')) ? 'input' : 'change', function (e) {\n          self.validate(e.target);\n        }.bind(self));\n        return input.pristine = {\n          input: input,\n          validators: fns,\n          params: params,\n          messages: messages,\n          self: self\n        };\n      }.bind(self));\n    }\n\n    function _addValidatorToField(fns, params, name, value) {\n      var validator = validators[name];\n\n      if (validator) {\n        fns.push(validator);\n\n        if (value) {\n          var valueParams = value.split(',');\n          valueParams.unshift(null); // placeholder for input's value\n\n          params[name] = valueParams;\n        }\n      }\n    }\n    /***\n     * Checks whether the form/input elements are valid\n     * @param input => input element(s) or a jquery selector, null for full form validation\n     * @param silent => do not show error messages, just return true/false\n     * @returns {boolean} return true when valid false otherwise\n     */\n\n\n    self.validate = function (input, silent) {\n      silent = input && silent === true || input === true;\n      var fields = self.fields;\n\n      if (input !== true && input !== false) {\n        if (input instanceof HTMLElement) {\n          fields = [input.pristine];\n        } else if (input instanceof NodeList || input instanceof (window.$ || Array) || input instanceof Array) {\n          fields = Array.from(input).map(function (el) {\n            return el.pristine;\n          });\n        }\n      }\n\n      var valid = true;\n\n      for (var i in fields) {\n        var field = fields[i];\n\n        if (_validateField(field)) {\n          !silent && _showSuccess(field);\n        } else {\n          valid = false;\n          !silent && _showError(field);\n        }\n      }\n\n      return valid;\n    };\n    /***\n     * Get errors of a specific field or the whole form\n     * @param input\n     * @returns {Array|*}\n     */\n\n\n    self.getErrors = function (input) {\n      if (!input) {\n        var erroneousFields = [];\n\n        for (var i = 0; i < self.fields.length; i++) {\n          var field = self.fields[i];\n\n          if (field.errors.length) {\n            erroneousFields.push({\n              input: field.input,\n              errors: field.errors\n            });\n          }\n        }\n\n        return erroneousFields;\n      }\n\n      return input.length ? input[0].pristine.errors : input.pristine.errors;\n    };\n    /***\n     * Validates a single field, all validator functions are called and error messages are generated\n     * when a validator fails\n     * @param field\n     * @returns {boolean}\n     * @private\n     */\n\n\n    function _validateField(field) {\n      var errors = [];\n      var valid = true;\n\n      for (var i in field.validators) {\n        var validator = field.validators[i];\n        var params = field.params[validator.name] ? field.params[validator.name] : [];\n        params[0] = field.input.value;\n\n        if (!validator.fn.apply(field.input, params)) {\n          valid = false;\n          var error = field.messages[validator.name] || validator.msg;\n          errors.push(tmpl.apply(error, params));\n\n          if (validator.halt === true) {\n            break;\n          }\n        }\n      }\n\n      field.errors = errors;\n      return valid;\n    }\n    /***\n     *\n     * @param elem => The dom element where the validator is applied to\n     * @param fn => validator function\n     * @param msg => message to show when validation fails. Supports templating. ${0} for the input's value, ${1} and\n     * so on are for the attribute values\n     * @param priority => priority of the validator function, higher valued function gets called first.\n     * @param halt => whether validation should stop for this field after current validation function\n     */\n\n\n    self.addValidator = function (elem, fn, msg, priority, halt) {\n      if (elem instanceof HTMLElement) {\n        elem.pristine.validators.push({\n          fn: fn,\n          msg: msg,\n          priority: priority,\n          halt: halt\n        });\n        elem.pristine.validators.sort(function (a, b) {\n          return b.priority - a.priority;\n        });\n      } else {\n        console.warn(\"The parameter elem must be a dom element\");\n      }\n    };\n    /***\n     * An utility function that returns a 2-element array, first one is the element where error/success class is\n     * applied. 2nd one is the element where error message is displayed. 2nd element is created if doesn't exist and cached.\n     * @param field\n     * @returns {*}\n     * @private\n     */\n\n\n    function _getErrorElements(field) {\n      if (field.errorElements) {\n        return field.errorElements;\n      }\n\n      var errorClassElement = findAncestor(field.input, self.config.classTo);\n      var errorTextParent = null,\n          errorTextElement = null;\n\n      if (self.config.classTo === self.config.errorTextParent) {\n        errorTextParent = errorClassElement;\n      } else {\n        errorTextParent = errorClassElement.querySelector(self.errorTextParent);\n      }\n\n      if (errorTextParent) {\n        errorTextElement = errorTextParent.querySelector('.' + PRISTINE_ERROR);\n\n        if (!errorTextElement) {\n          errorTextElement = document.createElement(self.config.errorTextTag);\n          errorTextElement.className = PRISTINE_ERROR + ' ' + self.config.errorTextClass;\n          errorTextParent.appendChild(errorTextElement);\n          errorTextElement.pristineDisplay = errorTextElement.style.display;\n        }\n      }\n\n      return field.errorElements = [errorClassElement, errorTextElement];\n    }\n\n    function _showError(field) {\n      var errorElements = _getErrorElements(field);\n\n      var errorClassElement = errorElements[0],\n          errorTextElement = errorElements[1];\n\n      if (errorClassElement) {\n        errorClassElement.classList.remove(self.config.successClass);\n        errorClassElement.classList.add(self.config.errorClass);\n      }\n\n      if (errorTextElement) {\n        errorTextElement.innerHTML = field.errors.join('<br/>');\n        errorTextElement.style.display = errorTextElement.pristineDisplay || '';\n      }\n    }\n    /***\n     * Adds error to a specific field\n     * @param input\n     * @param error\n     */\n\n\n    self.addError = function (input, error) {\n      input = input.length ? input[0] : input;\n      input.pristine.errors.push(error);\n\n      _showError(input.pristine);\n    };\n\n    function _removeError(field) {\n      var errorElements = _getErrorElements(field);\n\n      var errorClassElement = errorElements[0],\n          errorTextElement = errorElements[1];\n\n      if (errorClassElement) {\n        // IE > 9 doesn't support multiple class removal\n        errorClassElement.classList.remove(self.config.errorClass);\n        errorClassElement.classList.remove(self.config.successClass);\n      }\n\n      if (errorTextElement) {\n        errorTextElement.innerHTML = '';\n        errorTextElement.style.display = 'none';\n      }\n\n      return errorElements;\n    }\n\n    function _showSuccess(field) {\n      var errorClassElement = _removeError(field)[0];\n\n      errorClassElement && errorClassElement.classList.add(self.config.successClass);\n    }\n    /***\n     * Resets the errors\n     */\n\n\n    self.reset = function () {\n      for (var i in self.fields) {\n        self.fields[i].errorElements = null;\n      }\n\n      Array.from(self.form.querySelectorAll('.' + PRISTINE_ERROR)).map(function (elem) {\n        elem.parentNode.removeChild(elem);\n      });\n      Array.from(self.form.querySelectorAll('.' + self.config.classTo)).map(function (elem) {\n        elem.classList.remove(self.config.successClass);\n        elem.classList.remove(self.config.errorClass);\n      });\n    };\n    /***\n     * Resets the errors and deletes all pristine fields\n     */\n\n\n    self.destroy = function () {\n      self.reset();\n      self.fields.forEach(function (field) {\n        delete field.input.pristine;\n      });\n      self.fields = [];\n    };\n\n    self.setGlobalConfig = function (config) {\n      defaultConfig = config;\n    };\n\n    return self;\n  }\n  /***\n   *\n   * @param name => Name of the global validator\n   * @param fn => validator function\n   * @param msg => message to show when validation fails. Supports templating. ${0} for the input's value, ${1} and\n   * so on are for the attribute values\n   * @param priority => priority of the validator function, higher valued function gets called first.\n   * @param halt => whether validation should stop for this field after current validation function\n   */\n\n\n  Pristine.addValidator = function (name, fn, msg, priority, halt) {\n    _(name, {\n      fn: fn,\n      msg: msg,\n      priority: priority,\n      halt: halt\n    });\n  };\n\n  return Pristine;\n});","map":{"version":3,"sources":["/Users/leoneloliviera/Desktop/react-drop/src/pristine.js"],"names":["global","factory","exports","module","define","amd","Pristine","lang","required","email","number","url","tel","maxlength","minlength","min","max","pattern","findAncestor","el","cls","parentElement","classList","contains","tmpl","o","_arguments","arguments","replace","a","b","groupedElemCount","input","pristine","self","form","querySelectorAll","getAttribute","length","mergeConfig","obj1","obj2","attr","defaultConfig","classTo","errorClass","successClass","errorTextParent","errorTextTag","errorTextClass","PRISTINE_ERROR","SELECTOR","ALLOWED_ATTRIBUTES","validators","_","name","validator","msg","priority","undefined","fn","val","type","halt","test","isNaN","parseFloat","parseInt","limit","m","match","RegExp","config","live","init","setAttribute","fields","Array","from","map","fns","params","messages","forEach","call","attributes","substr","endsWith","slice","value","_addValidatorToField","indexOf","sort","addEventListener","e","validate","target","bind","push","valueParams","split","unshift","silent","HTMLElement","NodeList","window","$","valid","i","field","_validateField","_showSuccess","_showError","getErrors","erroneousFields","errors","apply","error","addValidator","elem","console","warn","_getErrorElements","errorElements","errorClassElement","errorTextElement","querySelector","document","createElement","className","appendChild","pristineDisplay","style","display","remove","add","innerHTML","join","addError","_removeError","reset","parentNode","removeChild","destroy","setGlobalConfig"],"mappings":"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","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.Pristine = factory());\n}(this, (function () { 'use strict';\n\nvar lang = {\n    required: \"This field is required\",\n    email: \"This field requires a valid e-mail address\",\n    number: \"This field requires a number\",\n    url: \"This field requires a valid website URL\",\n    tel: \"This field requires a valid telephone number\",\n    maxlength: \"This fields length must be < ${1}\",\n    minlength: \"This fields length must be > ${1}\",\n    min: \"Minimum value for this field is ${1}\",\n    max: \"Maximum value for this field is ${1}\",\n    pattern: \"Input must match the pattern ${1}\"\n};\n\nfunction findAncestor(el, cls) {\n    while ((el = el.parentElement) && !el.classList.contains(cls)) {}\n    return el;\n}\n\nfunction tmpl(o) {\n    var _arguments = arguments;\n\n    return this.replace(/\\${([^{}]*)}/g, function (a, b) {\n        return _arguments[b];\n    });\n}\n\nfunction groupedElemCount(input) {\n    return input.pristine.self.form.querySelectorAll('input[name=\"' + input.getAttribute('name') + '\"]:checked').length;\n}\n\nfunction mergeConfig(obj1, obj2) {\n    for (var attr in obj2) {\n        if (!(attr in obj1)) {\n            obj1[attr] = obj2[attr];\n        }\n    }\n    return obj1;\n}\n\nvar defaultConfig = {\n    classTo: 'form-group',\n    errorClass: 'has-danger',\n    successClass: 'has-success',\n    errorTextParent: 'form-group',\n    errorTextTag: 'div',\n    errorTextClass: 'text-help'\n};\n\nvar PRISTINE_ERROR = 'pristine-error';\nvar SELECTOR = \"input:not([type^=hidden]):not([type^=submit]), select, textarea\";\nvar ALLOWED_ATTRIBUTES = [\"required\", \"min\", \"max\", 'minlength', 'maxlength', 'pattern'];\n\nvar validators = {};\n\nvar _ = function _(name, validator) {\n    validator.name = name;\n    if (!validator.msg) validator.msg = lang[name];\n    if (validator.priority === undefined) validator.priority = 1;\n    validators[name] = validator;\n};\n\n_('text', { fn: function fn(val) {\n        return true;\n    }, priority: 0 });\n_('required', { fn: function fn(val) {\n        return this.type === 'radio' || this.type === 'checkbox' ? groupedElemCount(this) : val !== undefined && val !== '';\n    }, priority: 99, halt: true });\n_('email', { fn: function fn(val) {\n        return !val || /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(val);\n    } });\n_('number', { fn: function fn(val) {\n        return !val || !isNaN(parseFloat(val));\n    }, priority: 2 });\n_('integer', { fn: function fn(val) {\n        return val && /^\\d+$/.test(val);\n    } });\n_('minlength', { fn: function fn(val, length) {\n        return !val || val.length >= parseInt(length);\n    } });\n_('maxlength', { fn: function fn(val, length) {\n        return !val || val.length <= parseInt(length);\n    } });\n_('min', { fn: function fn(val, limit) {\n        return !val || (this.type === 'checkbox' ? groupedElemCount(this) >= parseInt(limit) : parseFloat(val) >= parseFloat(limit));\n    } });\n_('max', { fn: function fn(val, limit) {\n        return !val || (this.type === 'checkbox' ? groupedElemCount(this) <= parseInt(limit) : parseFloat(val) <= parseFloat(limit));\n    } });\n_('pattern', { fn: function fn(val, pattern) {\n        var m = pattern.match(new RegExp('^/(.*?)/([gimy]*)$'));return !val || new RegExp(m[1], m[2]).test(val);\n    } });\n\nfunction Pristine(form, config, live) {\n\n    var self = this;\n\n    init(form, config, live);\n\n    function init(form, config, live) {\n\n        form.setAttribute(\"novalidate\", \"true\");\n\n        self.form = form;\n        self.config = mergeConfig(config || {}, defaultConfig);\n        self.live = !(live === false);\n        self.fields = Array.from(form.querySelectorAll(SELECTOR)).map(function (input) {\n\n            var fns = [];\n            var params = {};\n            var messages = {};\n\n            [].forEach.call(input.attributes, function (attr) {\n                if (/^data-pristine-/.test(attr.name)) {\n                    var name = attr.name.substr(14);\n                    if (name.endsWith('-message')) {\n                        messages[name.slice(0, name.length - 8)] = attr.value;\n                        return;\n                    }\n                    if (name === 'type') name = attr.value;\n                    _addValidatorToField(fns, params, name, attr.value);\n                } else if (~ALLOWED_ATTRIBUTES.indexOf(attr.name)) {\n                    _addValidatorToField(fns, params, attr.name, attr.value);\n                } else if (attr.name === 'type') {\n                    _addValidatorToField(fns, params, attr.value);\n                }\n            });\n\n            fns.sort(function (a, b) {\n                return b.priority - a.priority;\n            });\n\n            self.live && input.addEventListener(!~['radio', 'checkbox'].indexOf(input.getAttribute('type')) ? 'input' : 'change', function (e) {\n                self.validate(e.target);\n            }.bind(self));\n\n            return input.pristine = { input: input, validators: fns, params: params, messages: messages, self: self };\n        }.bind(self));\n    }\n\n    function _addValidatorToField(fns, params, name, value) {\n        var validator = validators[name];\n        if (validator) {\n            fns.push(validator);\n            if (value) {\n                var valueParams = value.split(',');\n                valueParams.unshift(null); // placeholder for input's value\n                params[name] = valueParams;\n            }\n        }\n    }\n\n    /***\n     * Checks whether the form/input elements are valid\n     * @param input => input element(s) or a jquery selector, null for full form validation\n     * @param silent => do not show error messages, just return true/false\n     * @returns {boolean} return true when valid false otherwise\n     */\n    self.validate = function (input, silent) {\n        silent = input && silent === true || input === true;\n        var fields = self.fields;\n        if (input !== true && input !== false) {\n            if (input instanceof HTMLElement) {\n                fields = [input.pristine];\n            } else if (input instanceof NodeList || input instanceof (window.$ || Array) || input instanceof Array) {\n                fields = Array.from(input).map(function (el) {\n                    return el.pristine;\n                });\n            }\n        }\n\n        var valid = true;\n\n        for (var i in fields) {\n            var field = fields[i];\n            if (_validateField(field)) {\n                !silent && _showSuccess(field);\n            } else {\n                valid = false;\n                !silent && _showError(field);\n            }\n        }\n        return valid;\n    };\n\n    /***\n     * Get errors of a specific field or the whole form\n     * @param input\n     * @returns {Array|*}\n     */\n    self.getErrors = function (input) {\n        if (!input) {\n            var erroneousFields = [];\n            for (var i = 0; i < self.fields.length; i++) {\n                var field = self.fields[i];\n                if (field.errors.length) {\n                    erroneousFields.push({ input: field.input, errors: field.errors });\n                }\n            }\n            return erroneousFields;\n        }\n        return input.length ? input[0].pristine.errors : input.pristine.errors;\n    };\n\n    /***\n     * Validates a single field, all validator functions are called and error messages are generated\n     * when a validator fails\n     * @param field\n     * @returns {boolean}\n     * @private\n     */\n    function _validateField(field) {\n        var errors = [];\n        var valid = true;\n        for (var i in field.validators) {\n            var validator = field.validators[i];\n            var params = field.params[validator.name] ? field.params[validator.name] : [];\n            params[0] = field.input.value;\n            if (!validator.fn.apply(field.input, params)) {\n                valid = false;\n                var error = field.messages[validator.name] || validator.msg;\n                errors.push(tmpl.apply(error, params));\n                if (validator.halt === true) {\n                    break;\n                }\n            }\n        }\n        field.errors = errors;\n        return valid;\n    }\n\n    /***\n     *\n     * @param elem => The dom element where the validator is applied to\n     * @param fn => validator function\n     * @param msg => message to show when validation fails. Supports templating. ${0} for the input's value, ${1} and\n     * so on are for the attribute values\n     * @param priority => priority of the validator function, higher valued function gets called first.\n     * @param halt => whether validation should stop for this field after current validation function\n     */\n    self.addValidator = function (elem, fn, msg, priority, halt) {\n        if (elem instanceof HTMLElement) {\n            elem.pristine.validators.push({ fn: fn, msg: msg, priority: priority, halt: halt });\n            elem.pristine.validators.sort(function (a, b) {\n                return b.priority - a.priority;\n            });\n        } else {\n            console.warn(\"The parameter elem must be a dom element\");\n        }\n    };\n\n    /***\n     * An utility function that returns a 2-element array, first one is the element where error/success class is\n     * applied. 2nd one is the element where error message is displayed. 2nd element is created if doesn't exist and cached.\n     * @param field\n     * @returns {*}\n     * @private\n     */\n    function _getErrorElements(field) {\n        if (field.errorElements) {\n            return field.errorElements;\n        }\n        var errorClassElement = findAncestor(field.input, self.config.classTo);\n        var errorTextParent = null,\n            errorTextElement = null;\n        if (self.config.classTo === self.config.errorTextParent) {\n            errorTextParent = errorClassElement;\n        } else {\n            errorTextParent = errorClassElement.querySelector(self.errorTextParent);\n        }\n        if (errorTextParent) {\n            errorTextElement = errorTextParent.querySelector('.' + PRISTINE_ERROR);\n            if (!errorTextElement) {\n                errorTextElement = document.createElement(self.config.errorTextTag);\n                errorTextElement.className = PRISTINE_ERROR + ' ' + self.config.errorTextClass;\n                errorTextParent.appendChild(errorTextElement);\n                errorTextElement.pristineDisplay = errorTextElement.style.display;\n            }\n        }\n        return field.errorElements = [errorClassElement, errorTextElement];\n    }\n\n    function _showError(field) {\n        var errorElements = _getErrorElements(field);\n        var errorClassElement = errorElements[0],\n            errorTextElement = errorElements[1];\n\n        if (errorClassElement) {\n            errorClassElement.classList.remove(self.config.successClass);\n            errorClassElement.classList.add(self.config.errorClass);\n        }\n        if (errorTextElement) {\n            errorTextElement.innerHTML = field.errors.join('<br/>');\n            errorTextElement.style.display = errorTextElement.pristineDisplay || '';\n        }\n    }\n\n    /***\n     * Adds error to a specific field\n     * @param input\n     * @param error\n     */\n    self.addError = function (input, error) {\n        input = input.length ? input[0] : input;\n        input.pristine.errors.push(error);\n        _showError(input.pristine);\n    };\n\n    function _removeError(field) {\n        var errorElements = _getErrorElements(field);\n        var errorClassElement = errorElements[0],\n            errorTextElement = errorElements[1];\n        if (errorClassElement) {\n            // IE > 9 doesn't support multiple class removal\n            errorClassElement.classList.remove(self.config.errorClass);\n            errorClassElement.classList.remove(self.config.successClass);\n        }\n        if (errorTextElement) {\n            errorTextElement.innerHTML = '';\n            errorTextElement.style.display = 'none';\n        }\n        return errorElements;\n    }\n\n    function _showSuccess(field) {\n        var errorClassElement = _removeError(field)[0];\n        errorClassElement && errorClassElement.classList.add(self.config.successClass);\n    }\n\n    /***\n     * Resets the errors\n     */\n    self.reset = function () {\n        for (var i in self.fields) {\n            self.fields[i].errorElements = null;\n        }\n        Array.from(self.form.querySelectorAll('.' + PRISTINE_ERROR)).map(function (elem) {\n            elem.parentNode.removeChild(elem);\n        });\n        Array.from(self.form.querySelectorAll('.' + self.config.classTo)).map(function (elem) {\n            elem.classList.remove(self.config.successClass);\n            elem.classList.remove(self.config.errorClass);\n        });\n    };\n\n    /***\n     * Resets the errors and deletes all pristine fields\n     */\n    self.destroy = function () {\n        self.reset();\n        self.fields.forEach(function (field) {\n            delete field.input.pristine;\n        });\n        self.fields = [];\n    };\n\n    self.setGlobalConfig = function (config) {\n        defaultConfig = config;\n    };\n\n    return self;\n}\n\n/***\n *\n * @param name => Name of the global validator\n * @param fn => validator function\n * @param msg => message to show when validation fails. Supports templating. ${0} for the input's value, ${1} and\n * so on are for the attribute values\n * @param priority => priority of the validator function, higher valued function gets called first.\n * @param halt => whether validation should stop for this field after current validation function\n */\nPristine.addValidator = function (name, fn, msg, priority, halt) {\n    _(name, { fn: fn, msg: msg, priority: priority, halt: halt });\n};\n\nreturn Pristine;\n\n})));\n"]},"metadata":{},"sourceType":"module"}