{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\"; // Globally track the nodes previously inserted so each is only inserted once\n\nvar scriptUrls = {};\nvar sheetUrls = {};\n\nfunction isBrowser() {\n  return typeof document !== \"undefined\" && typeof window !== \"undefined\";\n}\n\nvar ReactDependentScript = function (_Component) {\n  _inherits(ReactDependentScript, _Component);\n\n  function ReactDependentScript() {\n    _classCallCheck(this, ReactDependentScript);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this));\n\n    _this._handleLoad = function () {\n      _this.setState({\n        loadingCount: _this.state.loadingCount - 1\n      });\n    };\n\n    _this.state = {\n      loadingCount: 0\n    };\n    return _this;\n  }\n\n  ReactDependentScript.prototype.componentWillMount = function componentWillMount() {\n    var _this2 = this;\n\n    if (!isBrowser()) {\n      // When mounted during server side rendering, do not\n      // attempt to mutate the document, as it will break.\n      return;\n    }\n\n    var _props = this.props,\n        scripts = _props.scripts,\n        stylesheets = _props.stylesheets; // Load the stylesheets first, but don't wait for them to complete, as\n    // nothing will break.\n\n    if (stylesheets && stylesheets.length > 0) {\n      stylesheets.forEach(function (sheet) {\n        if (!sheetUrls[sheet]) {\n          var sheetNode = document.createElement(\"link\");\n          sheetNode.setAttribute(\"rel\", \"stylesheet\");\n          sheetNode.setAttribute(\"href\", sheet);\n          document.body.appendChild(sheetNode);\n        }\n\n        sheetUrls[sheet] = 1;\n      });\n    } // Look for the script in the body. If not there, inject it.\n\n\n    if (scripts && scripts.length > 0) {\n      var unloadedScripts = scripts.filter(function (script) {\n        return !scriptUrls[script.source || script];\n      });\n      this.setState({\n        loadingCount: unloadedScripts.length\n      }, function () {\n        unloadedScripts.forEach(function (script) {\n          var src = script.source || script;\n          scriptUrls[src] = 1;\n          var scriptNode = document.createElement(\"script\");\n          scriptNode.type = \"text/javascript\";\n          scriptNode.src = src;\n          scriptNode.addEventListener(\"load\", _this2._handleLoad);\n          scriptNode.addEventListener(\"error\", (script.onerror, // error callback\n          script.not_required && _this2._handleLoad // using not_required,\n          // user can choose to render children,\n          // even on error\n          ));\n          document.body.appendChild(scriptNode);\n        });\n      });\n    }\n  };\n\n  ReactDependentScript.prototype.render = function render() {\n    var _props2 = this.props,\n        renderChildren = _props2.renderChildren,\n        children = _props2.children,\n        loadingComponent = _props2.loadingComponent;\n\n    if (isBrowser() && this.state.loadingCount === 0) {\n      if (renderChildren) {\n        return renderChildren();\n      }\n\n      return children;\n    } else {\n      return loadingComponent || null;\n    }\n  };\n\n  return ReactDependentScript;\n}(Component);\n\nexport { ReactDependentScript as default };","map":null,"metadata":{},"sourceType":"module"}